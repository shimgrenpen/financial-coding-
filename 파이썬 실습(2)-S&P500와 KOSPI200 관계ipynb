{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fe864b92-4e4b-4403-9260-2bb378c58839",
   "metadata": {},
   "source": [
    "## 네이버에서 kospi200지수 수집하기 링크:http://finance.naver.com/sise/sise_index.nhn?code=KPI200 (pg.99~118)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "c1415332-7ecc-4df7-a43d-34cbc41fe992",
   "metadata": {},
   "outputs": [],
   "source": [
    "#https://finance.naver.com/sise/sise_index_day.naver?code=KPI200: 네이버 일별시세의 주소창\n",
    "#https://finance.naver.com/sise/sise_index_day.naver?code=KPI200&page=744: 일별시세의 주소창에서 가장 끝 페이지 (2024-01-20일 기준)\n",
    "index_cd='KPI200'\n",
    "page_n=1\n",
    "naver_index='https://finance.naver.com/sise/sise_index_day.naver?code='+index_cd+'&page='+str(page_n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "f4f18ee2-c365-4132-b3fd-08efb62e3795",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "b'<html lang=\"ko\">\\n<head>\\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=euc-kr\">\\n<title>\\xb3\\xd7\\xc0\\xcc\\xb9\\xf6\\xc6\\xe4\\xc0\\xcc \\xc1\\xf5\\xb1\\xc7</title>\\n\\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/newstock.css\">\\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/common.css\">\\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/layout.css\">\\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/main.css\">\\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/newstock2.css\">\\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/newstock3.css\">\\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/world.css\">\\n</head>\\n<body>\\n<script type=\"text/javascript\" src=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/js/jindo.min.ns.1.5.3.euckr.js\"></script>\\n<script type=\"text/javascript\" src=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/js/lcslog.js\"></script>\\n\\t\\t\\t\\t<!-- \\xc0\\xcf\\xba\\xb0\\xbd\\xc3\\xbc\\xbc -->\\n\\t\\t\\t\\t<div class=\"box_type_m\">\\n\\t\\t\\t\\t\\t<h4 class=\"top_tlt\" style=\"text-align:left;\"><em>\\xc0\\xcf\\xba\\xb0</em>\\xbd\\xc3\\xbc\\xbc</h4>\\n\\t\\t\\t\\t\\t<table summary=\"\\xc0\\xcf\\xba\\xb0 \\xbd\\xc3\\xbc\\xbc\\xc7\\xa5:\\xb3\\xaf\\xc2\\xa5\\xbf\\xa1 \\xb5\\xfb\\xb8\\xa5 \\xc3\\xbc\\xb0\\xe1\\xb0\\xa1 \\xc0\\xfc\\xc0\\xcf\\xba\\xf1 \\xb5\\xee\\xb6\\xf4\\xb7\\xfc \\xb0\\xc5\\xb7\\xa1\\xb7\\xae \\xb0\\xc5\\xb7\\xa1\\xb4\\xeb\\xb1\\xdd \\xc1\\xa4\\xba\\xb8\\xb8\\xa6 \\xc1\\xa6\\xb0\\xf8\\xc7\\xd5\\xb4\\xcf\\xb4\\xd9.\" cellpadding=\"0\" cellspacing=\"0\" class=\"type_1\">\\n\\t\\t\\t\\t\\t<caption>\\xc0\\xcf\\xba\\xb0\\xbd\\xc3\\xbc\\xbc</caption>\\n\\t\\t\\t\\t\\t<col width=\"15%\"><col width=\"14%\"><col width=\"18%\"><col width=\"14%\"><col width=\"*\"><col width=\"18%\">\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t\\t<th>\\xb3\\xaf\\xc2\\xa5</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>\\xc3\\xbc\\xb0\\xe1\\xb0\\xa1</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>\\xc0\\xfc\\xc0\\xcf\\xba\\xf1</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>\\xb5\\xee\\xb6\\xf4\\xb7\\xfc</th>\\n\\t\\t\\t\\t\\t\\t\\t<th>\\xb0\\xc5\\xb7\\xa1\\xb7\\xae<span class=\"add_txt\">(\\xc3\\xb5\\xc1\\xd6)</span></th>\\n\\t\\t\\t\\t\\t\\t\\t<th>\\xb0\\xc5\\xb7\\xa1\\xb4\\xeb\\xb1\\xdd<span class=\"add_txt\">(\\xb9\\xe9\\xb8\\xb8)</span></th>\\n\\t\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t<tr><td colspan=\"6\" class=\"blank_07\"></td></tr>\\n\\n\\t\\n\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t<td class=\"date\">2024.01.30</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">337.83</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"rate_down\" style=\"padding-right:35px;\">\\n\\t\\t\\t\\t<img src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_down.gif\" width=\"7\" height=\"6\" style=\"margin-right:4px;\" alt=\"\\xc7\\xcf\\xb6\\xf4\"><span class=\"tah p11 nv01\">\\n\\t\\t\\t\\t0.01\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">\\n\\t\\t\\t\\t<span class=\"tah p11 nv01\">\\n\\t\\t\\t\\t-0.00%\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:40px;\">77,631</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:30px;\">4,056,989</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t<td class=\"date\">2024.01.29</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">337.84</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"rate_down\" style=\"padding-right:35px;\">\\n\\t\\t\\t\\t<img src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_up.gif\" width=\"7\" height=\"6\" style=\"margin-right:4px;\" alt=\"\\xbb\\xf3\\xbd\\xc2\"><span class=\"tah p11 red02\">\\n\\t\\t\\t\\t3.63\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">\\n\\t\\t\\t\\t<span class=\"tah p11 red01\">\\n\\t\\t\\t\\t+1.09%\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:40px;\">114,357</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:30px;\">6,649,546</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t<td class=\"date\">2024.01.26</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">334.21</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"rate_down\" style=\"padding-right:35px;\">\\n\\t\\t\\t\\t<img src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_up.gif\" width=\"7\" height=\"6\" style=\"margin-right:4px;\" alt=\"\\xbb\\xf3\\xbd\\xc2\"><span class=\"tah p11 red02\">\\n\\t\\t\\t\\t0.41\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">\\n\\t\\t\\t\\t<span class=\"tah p11 red01\">\\n\\t\\t\\t\\t+0.12%\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:40px;\">86,543</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:30px;\">5,279,004</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t<tr><td colspan=\"6\" class=\"blank_08\"></td></tr>\\n\\t\\t\\t\\t\\t<tr><td colspan=\"6\" class=\"division_line\"></td></tr>\\n\\t\\t\\t\\t\\t<tr><td colspan=\"6\" class=\"blank_08\"></td></tr>\\n\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t<td class=\"date\">2024.01.25</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">333.80</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"rate_down\" style=\"padding-right:35px;\">\\n\\t\\t\\t\\t<img src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_up.gif\" width=\"7\" height=\"6\" style=\"margin-right:4px;\" alt=\"\\xbb\\xf3\\xbd\\xc2\"><span class=\"tah p11 red02\">\\n\\t\\t\\t\\t0.53\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">\\n\\t\\t\\t\\t<span class=\"tah p11 red01\">\\n\\t\\t\\t\\t+0.16%\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:40px;\">101,107</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:30px;\">5,982,910</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t<td class=\"date\">2024.01.24</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">333.27</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"rate_down\" style=\"padding-right:35px;\">\\n\\t\\t\\t\\t<img src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_down.gif\" width=\"7\" height=\"6\" style=\"margin-right:4px;\" alt=\"\\xc7\\xcf\\xb6\\xf4\"><span class=\"tah p11 nv01\">\\n\\t\\t\\t\\t1.70\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">\\n\\t\\t\\t\\t<span class=\"tah p11 nv01\">\\n\\t\\t\\t\\t-0.51%\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:40px;\">100,934</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:30px;\">5,121,258</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t<tr>\\n\\t\\t\\t\\t\\t\\t<td class=\"date\">2024.01.23</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">334.97</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"rate_down\" style=\"padding-right:35px;\">\\n\\t\\t\\t\\t<img src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_up.gif\" width=\"7\" height=\"6\" style=\"margin-right:4px;\" alt=\"\\xbb\\xf3\\xbd\\xc2\"><span class=\"tah p11 red02\">\\n\\t\\t\\t\\t2.34\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\">\\n\\t\\t\\t\\t<span class=\"tah p11 red01\">\\n\\t\\t\\t\\t+0.70%\\n\\t\\t\\t\\t</span>\\n\\t\\t\\t</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:40px;\">95,068</td>\\n\\t\\t\\t\\t\\t\\t<td class=\"number_1\" style=\"padding-right:30px;\">5,396,094</td>\\n\\t\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t\\n\\t\\t\\t\\n\\t\\n\\t\\n\\t\\n\\t\\n\\n\\t\\t\\t\\t\\t<tr><td colspan=\"6\" class=\"blank_09\"></td></tr>\\n\\t\\t\\t\\t\\t<tr><td colspan=\"6\" class=\"division_line\"></td></tr>\\n\\t\\t\\t\\t\\t</table>\\n\\t\\t\\t\\t<!--- \\xc6\\xe4\\xc0\\xcc\\xc1\\xf6 \\xb3\\xd7\\xba\\xf1\\xb0\\xd4\\xc0\\xcc\\xbc\\xc7 \\xbd\\xc3\\xc0\\xdb--->\\n\\t\\t\\t\\t<table summary=\"\\xc6\\xe4\\xc0\\xcc\\xc1\\xf6 \\xb3\\xd7\\xba\\xf1\\xb0\\xd4\\xc0\\xcc\\xbc\\xc7 \\xb8\\xae\\xbd\\xba\\xc6\\xae\" class=\"Nnavi\" align=\"center\">\\n\\t\\t\\t\\t<caption>\\xc6\\xe4\\xc0\\xcc\\xc1\\xf6 \\xb3\\xd7\\xba\\xf1\\xb0\\xd4\\xc0\\xcc\\xbc\\xc7</caption>\\n\\t\\t\\t\\t<tr>\\t\\t\\n\\t\\t\\t\\n\\t\\t\\t\\t\\n                \\n                <td class=\"on\">\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=1\"  >1</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=2\"  >2</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=3\"  >3</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=4\"  >4</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=5\"  >5</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=6\"  >6</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=7\"  >7</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=8\"  >8</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=9\"  >9</a>\\n\\t\\t\\t\\t</td>\\n<td>\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=10\"  >10</a>\\n\\t\\t\\t\\t</td>\\n\\n                <td class=\"pgR\">\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=11\"  >\\n\\t\\t\\t\\t\\xb4\\xd9\\xc0\\xbd<img src=\"https://ssl.pstatic.net/static/n/cmn/bu_pgarR.gif\" width=\"3\" height=\"5\" alt=\"\" border=\"0\">\\n\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t</td>\\n\\n                <td class=\"pgRR\">\\n\\t\\t\\t\\t<a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=745\"  >\\xb8\\xc7\\xb5\\xda\\n\\t\\t\\t\\t<img src=\"https://ssl.pstatic.net/static/n/cmn/bu_pgarRR.gif\" width=\"8\" height=\"5\" alt=\"\" border=\"0\">\\n\\t\\t\\t\\t</a>\\n\\t\\t\\t\\t</td>\\n\\n            \\n\\t\\t\\t\\t</tr>\\n\\t\\t\\t\\t</table>\\n\\t\\t\\t\\t<!--- \\xc6\\xe4\\xc0\\xcc\\xc1\\xf6 \\xb3\\xd7\\xba\\xf1\\xb0\\xd4\\xc0\\xcc\\xbc\\xc7 \\xb3\\xa1--->\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t<!-- //\\xc0\\xcf\\xba\\xb0\\xbd\\xc3\\xbc\\xbc -->\\n\\t\\t\\t\\t\\n<script type=\"text/javascript\">\\n    ;(function(){\\n        var eventType = \"onpageshow\" in window ? \"pageshow\" : \"load\";\\n        jindo.$Fn(function(){\\n            lcs_do();\\n        }).attach(window, eventType);\\n    })();\\n</script>\\n\\n</body>\\n</html>\\n'"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from urllib.request import urlopen\n",
    "source=urlopen(naver_index).read()\n",
    "source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "eb335bfa-cc11-46d7-8495-7d131d34243d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import bs4\n",
    "source=bs4.BeautifulSoup(source,'lxml')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "67fc1f17-cc10-4897-b9ff-501a357b14c3",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<html lang=\"ko\">\n",
      " <head>\n",
      "  <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\"/>\n",
      "  <title>\n",
      "   네이버페이 증권\n",
      "  </title>\n",
      "  <link href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/newstock.css\" rel=\"stylesheet\" type=\"text/css\"/>\n",
      "  <link href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/common.css\" rel=\"stylesheet\" type=\"text/css\"/>\n",
      "  <link href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/layout.css\" rel=\"stylesheet\" type=\"text/css\"/>\n",
      "  <link href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/main.css\" rel=\"stylesheet\" type=\"text/css\"/>\n",
      "  <link href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/newstock2.css\" rel=\"stylesheet\" type=\"text/css\"/>\n",
      "  <link href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/newstock3.css\" rel=\"stylesheet\" type=\"text/css\"/>\n",
      "  <link href=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/css/world.css\" rel=\"stylesheet\" type=\"text/css\"/>\n",
      " </head>\n",
      " <body>\n",
      "  <script src=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/js/jindo.min.ns.1.5.3.euckr.js\" type=\"text/javascript\">\n",
      "  </script>\n",
      "  <script src=\"https://ssl.pstatic.net/imgstock/static.pc/20240124162200/js/lcslog.js\" type=\"text/javascript\">\n",
      "  </script>\n",
      "  <!-- 일별시세 -->\n",
      "  <div class=\"box_type_m\">\n",
      "   <h4 class=\"top_tlt\" style=\"text-align:left;\">\n",
      "    <em>\n",
      "     일별\n",
      "    </em>\n",
      "    시세\n",
      "   </h4>\n",
      "   <table cellpadding=\"0\" cellspacing=\"0\" class=\"type_1\" summary=\"일별 시세표:날짜에 따른 체결가 전일비 등락률 거래량 거래대금 정보를 제공합니다.\">\n",
      "    <caption>\n",
      "     일별시세\n",
      "    </caption>\n",
      "    <col width=\"15%\"/>\n",
      "    <col width=\"14%\"/>\n",
      "    <col width=\"18%\"/>\n",
      "    <col width=\"14%\"/>\n",
      "    <col width=\"*\"/>\n",
      "    <col width=\"18%\"/>\n",
      "    <tr>\n",
      "     <th>\n",
      "      날짜\n",
      "     </th>\n",
      "     <th>\n",
      "      체결가\n",
      "     </th>\n",
      "     <th>\n",
      "      전일비\n",
      "     </th>\n",
      "     <th>\n",
      "      등락률\n",
      "     </th>\n",
      "     <th>\n",
      "      거래량\n",
      "      <span class=\"add_txt\">\n",
      "       (천주)\n",
      "      </span>\n",
      "     </th>\n",
      "     <th>\n",
      "      거래대금\n",
      "      <span class=\"add_txt\">\n",
      "       (백만)\n",
      "      </span>\n",
      "     </th>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"blank_07\" colspan=\"6\">\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"date\">\n",
      "      2024.01.30\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      337.83\n",
      "     </td>\n",
      "     <td class=\"rate_down\" style=\"padding-right:35px;\">\n",
      "      <img alt=\"하락\" height=\"6\" src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_down.gif\" style=\"margin-right:4px;\" width=\"7\"/>\n",
      "      <span class=\"tah p11 nv01\">\n",
      "       0.01\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      <span class=\"tah p11 nv01\">\n",
      "       -0.00%\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:40px;\">\n",
      "      77,631\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:30px;\">\n",
      "      4,056,989\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"date\">\n",
      "      2024.01.29\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      337.84\n",
      "     </td>\n",
      "     <td class=\"rate_down\" style=\"padding-right:35px;\">\n",
      "      <img alt=\"상승\" height=\"6\" src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_up.gif\" style=\"margin-right:4px;\" width=\"7\"/>\n",
      "      <span class=\"tah p11 red02\">\n",
      "       3.63\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      <span class=\"tah p11 red01\">\n",
      "       +1.09%\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:40px;\">\n",
      "      114,357\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:30px;\">\n",
      "      6,649,546\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"date\">\n",
      "      2024.01.26\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      334.21\n",
      "     </td>\n",
      "     <td class=\"rate_down\" style=\"padding-right:35px;\">\n",
      "      <img alt=\"상승\" height=\"6\" src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_up.gif\" style=\"margin-right:4px;\" width=\"7\"/>\n",
      "      <span class=\"tah p11 red02\">\n",
      "       0.41\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      <span class=\"tah p11 red01\">\n",
      "       +0.12%\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:40px;\">\n",
      "      86,543\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:30px;\">\n",
      "      5,279,004\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"blank_08\" colspan=\"6\">\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"division_line\" colspan=\"6\">\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"blank_08\" colspan=\"6\">\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"date\">\n",
      "      2024.01.25\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      333.80\n",
      "     </td>\n",
      "     <td class=\"rate_down\" style=\"padding-right:35px;\">\n",
      "      <img alt=\"상승\" height=\"6\" src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_up.gif\" style=\"margin-right:4px;\" width=\"7\"/>\n",
      "      <span class=\"tah p11 red02\">\n",
      "       0.53\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      <span class=\"tah p11 red01\">\n",
      "       +0.16%\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:40px;\">\n",
      "      101,107\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:30px;\">\n",
      "      5,982,910\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"date\">\n",
      "      2024.01.24\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      333.27\n",
      "     </td>\n",
      "     <td class=\"rate_down\" style=\"padding-right:35px;\">\n",
      "      <img alt=\"하락\" height=\"6\" src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_down.gif\" style=\"margin-right:4px;\" width=\"7\"/>\n",
      "      <span class=\"tah p11 nv01\">\n",
      "       1.70\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      <span class=\"tah p11 nv01\">\n",
      "       -0.51%\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:40px;\">\n",
      "      100,934\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:30px;\">\n",
      "      5,121,258\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"date\">\n",
      "      2024.01.23\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      334.97\n",
      "     </td>\n",
      "     <td class=\"rate_down\" style=\"padding-right:35px;\">\n",
      "      <img alt=\"상승\" height=\"6\" src=\"https://ssl.pstatic.net/imgstock/images/images4/ico_up.gif\" style=\"margin-right:4px;\" width=\"7\"/>\n",
      "      <span class=\"tah p11 red02\">\n",
      "       2.34\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\">\n",
      "      <span class=\"tah p11 red01\">\n",
      "       +0.70%\n",
      "      </span>\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:40px;\">\n",
      "      95,068\n",
      "     </td>\n",
      "     <td class=\"number_1\" style=\"padding-right:30px;\">\n",
      "      5,396,094\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"blank_09\" colspan=\"6\">\n",
      "     </td>\n",
      "    </tr>\n",
      "    <tr>\n",
      "     <td class=\"division_line\" colspan=\"6\">\n",
      "     </td>\n",
      "    </tr>\n",
      "   </table>\n",
      "   <!--- 페이지 네비게이션 시작--->\n",
      "   <table align=\"center\" class=\"Nnavi\" summary=\"페이지 네비게이션 리스트\">\n",
      "    <caption>\n",
      "     페이지 네비게이션\n",
      "    </caption>\n",
      "    <tr>\n",
      "     <td class=\"on\">\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=1\">\n",
      "       1\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=2\">\n",
      "       2\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=3\">\n",
      "       3\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=4\">\n",
      "       4\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=5\">\n",
      "       5\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=6\">\n",
      "       6\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=7\">\n",
      "       7\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=8\">\n",
      "       8\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=9\">\n",
      "       9\n",
      "      </a>\n",
      "     </td>\n",
      "     <td>\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=10\">\n",
      "       10\n",
      "      </a>\n",
      "     </td>\n",
      "     <td class=\"pgR\">\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=11\">\n",
      "       다음\n",
      "       <img alt=\"\" border=\"0\" height=\"5\" src=\"https://ssl.pstatic.net/static/n/cmn/bu_pgarR.gif\" width=\"3\"/>\n",
      "      </a>\n",
      "     </td>\n",
      "     <td class=\"pgRR\">\n",
      "      <a href=\"/sise/sise_index_day.naver?code=KPI200&amp;page=745\">\n",
      "       맨뒤\n",
      "       <img alt=\"\" border=\"0\" height=\"5\" src=\"https://ssl.pstatic.net/static/n/cmn/bu_pgarRR.gif\" width=\"8\"/>\n",
      "      </a>\n",
      "     </td>\n",
      "    </tr>\n",
      "   </table>\n",
      "   <!--- 페이지 네비게이션 끝--->\n",
      "  </div>\n",
      "  <!-- //일별시세 -->\n",
      "  <script type=\"text/javascript\">\n",
      "   ;(function(){\n",
      "        var eventType = \"onpageshow\" in window ? \"pageshow\" : \"load\";\n",
      "        jindo.$Fn(function(){\n",
      "            lcs_do();\n",
      "        }).attach(window, eventType);\n",
      "    })();\n",
      "  </script>\n",
      " </body>\n",
      "</html>\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(source.prettify())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "50024c06-3115-4a70-9768-6b113b888c18",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "54"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "td = source.find_all('td')\n",
    "len(td)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "63724314-760b-4cd2-9a80-d098e554a52e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<td class=\"date\">2024.01.30</td>"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#/html/body/div/table[1]/tbody/tr[3]/td[1]: 복사한 XPath\n",
    "source.find_all('table')[0].find_all('tr')[2].find_all('td')[0] #파이썬은 숫자를 0부터 세기 때문에 XPath 수에서 -1을 해줘야 한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "a21eaa8a-df06-465e-bf06-9764daa16886",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2024.01.30'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d=source.find_all('td',class_='date')[0].text\n",
    "d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "1293bf9c-1ae8-4342-b280-612f6b828c84",
   "metadata": {},
   "outputs": [],
   "source": [
    "#날짜 인식하기 위한 datetime 라이브러리\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "e05beb8e-cf1b-492e-9d56-e77dfa6ad514",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.date(2024, 1, 30)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "yyyy=int(d.split('.')[0]) #문자열.split(구분자)로 문자열을 년, 월, 일로 나눈다.\n",
    "mm=int(d.split('.')[1])\n",
    "dd=int(d.split('.')[2])\n",
    "this_date=dt.date(yyyy,mm,dd)\n",
    "this_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c31b0ce4-eeae-46f8-87dd-39e89b722d53",
   "metadata": {},
   "outputs": [],
   "source": [
    "#날짜 형식으로 바꾸는 함수 정의\n",
    "def date_format(d):\n",
    "    d=str(d).replace('-','.') #날짜 구분자가 .이 아닌 -으로 되어 있는 경우, .으로 변환해주는 기능을 한다.\n",
    "    yyyy=int(d.split('.')[0])\n",
    "    mm=int(d.split('.')[1])\n",
    "    dd=int(d.split('.')[2])\n",
    "    \n",
    "    this_date=dt.date(yyyy,mm,dd)\n",
    "    return this_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "cc745f03-7a58-4ee7-b4ee-973441006a27",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "337.83"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#종가지수를 가져오는 방법 pg.110 XPath: /html/body/div/table[1]/tbody/tr[3]/td[2]\n",
    "this_close=source.find_all('tr')[2].find_all('td')[1].text\n",
    "this_close=this_close.replace(',','')\n",
    "this_close=float(this_close)\n",
    "this_close"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "6a456c37-85f5-4b1e-befb-3d077501e952",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'337.83'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "p = source.find_all('td',class_='number_1')[0].text\n",
    "p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "af4fe46e-e620-4355-8748-a53dccabda7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "dates = source.find_all('td',class_='date')\n",
    "prices = source.find_all('td',class_='number_1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "49e95bb1-b787-49c2-9f67-37c220f4335f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(dates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "058c9c76-ba2f-417f-8f28-a7faddc71325",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "24"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(prices) #td class_=\"number_1\" 코드가 4개가 있다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "3c9d6a70-cb17-4e75-8ea1-29d983b291de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2024-01-30 337.83\n",
      "2024-01-29 337.84\n",
      "2024-01-26 334.21\n",
      "2024-01-25 333.8\n",
      "2024-01-24 333.27\n",
      "2024-01-23 334.97\n"
     ]
    }
   ],
   "source": [
    "for n in range(len(dates)): #dates 개수만큼 반복\n",
    "    this_date=dates[n].text #n번째 dates 값 추출\n",
    "    this_date=date_format(this_date) #날짜 형식으로 변환\n",
    "    \n",
    "    this_close=prices[n*4].text #0,4,8,....등 4의 배수에 해당하는 종가지수 추출\n",
    "    this_close=this_close.replace(',',' ') # 쉼표(,)제거\n",
    "    this_close=float(this_close) #숫자 형식으로 변환\n",
    "    this_close\n",
    "    print(this_date, this_close) #결과값 추출"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "97e517cb-9808-45de-a4b5-6c034d6f1172",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/sise/sise_index_day.naver?code=KPI200&page=745'"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 마지막 페이지 주소 Xpath: /html/body/div/table[2]/tbody/tr/td[12]/a\n",
    "paging = source.find('td',class_='pgRR').find('a')['href']\n",
    "paging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "20d36198-6461-4042-9d02-3d9981eb8118",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'page=745'"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paging = paging.split('&')[1]\n",
    "paging "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "873b0e81-4363-4f42-b86e-447c0caae6e1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'745'"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "paging = paging.split('=')[1]\n",
    "paging"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "a8ed10c3-d349-4b1b-bdac-4aae164807cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "#페이지 번호 int변수로 처리하기\n",
    "last_page=source.find('td',class_='pgRR').find('a')['href']\n",
    "last_page = last_page.split('&')[1]\n",
    "last_page = last_page.split('=')[1]\n",
    "last_page = int(last_page)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "c6668e30-0704-46d3-8126-a0d5360715f0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "745"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "last_page"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "967ea355-04ba-468b-a373-2292e78b096d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#데이터 추출 기능을 함수로 만들기\n",
    "def historical_index_naver(index_cd, start_date='',end_date='', page_n=1, last_page=0):\n",
    "    \n",
    "    #start_date 설정\n",
    "    if start_date: #start_date가 있으면\n",
    "        start_date = date_format(start_date)\n",
    "    else: #start_date가 없으면\n",
    "        start_date = dt.date.today()\n",
    "    \n",
    "    #end_date 설정\n",
    "    if end_date:\n",
    "        end_date = date_format(end_date)\n",
    "    else:\n",
    "        end_date=dt.date.today()\n",
    "        \n",
    "        \n",
    "    naver_index = 'http://finance.naver.com/sise/sise_index_day.nhn?code=' + index_cd +'&page=' + str(page_n)\n",
    "    \n",
    "    source = urlopen(naver_index).read() #지정한 페이지에서 코드 읽기\n",
    "    source = bs4.BeautifulSoup(source, 'lxml') #뷰티플 수프로 태그별로 코드 분류\n",
    "    \n",
    "    dates = source.find_all('td',class_='date') # <td class=\"date\">태그에서 날짜 수집\n",
    "    prices = source.find_all('td', class_='number_1') # <td class=\"number_1\"> 태그에서 지수 수집 \n",
    "    \n",
    "    for n in range(len(dates)):\n",
    "        \n",
    "        if dates[n].text.split('.')[0].isdigit():\n",
    "            \n",
    "            #날짜 처리 \n",
    "            this_date = dates[n].text\n",
    "            this_date = date_format(this_date)\n",
    "            \n",
    "            if this_date <= end_date and this_date >= start_date:\n",
    "            #start_date와 end_date 사이에서 데이터 저장\n",
    "                #종가 처리 \n",
    "                this_close = prices[n*4].text #prices 중 종기지수인 0,4,8....번째 데이터 추출\n",
    "                this_close = this_close.replace(',','')\n",
    "                this_close = float(this_close)\n",
    "                \n",
    "                #딕셔너리에 저장\n",
    "                historical_prices[this_date]= this_close\n",
    "                \n",
    "            elif this_date < start_date:\n",
    "            # start_date 이전이면 함수 종료\n",
    "                return historical_prices\n",
    "            \n",
    "    #페이지 내비게이션\n",
    "    if last_page == 0: \n",
    "        last_page=source.find('td',class_='pgRR').find('a')['href'] #마지막 페이지 주소 추출\n",
    "        last_page = last_page.split('&')[1] #& 뒤의 page=744 부분추출\n",
    "        last_page = last_page.split('=')[1] #'=' 뒤의 페이지 번호만 추출\n",
    "        last_page = int(last_page) #숫자형 변수로 전환\n",
    "            \n",
    "    #다음 페이지 호출 \n",
    "    if page_n < last_page:\n",
    "        page_n = page_n + 1\n",
    "        historical_index_naver(index_cd,start_date,end_date,page_n, last_page)\n",
    "        \n",
    "        return historical_prices\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "8d893298-8bbc-4c6b-9097-97c5eaee5d2c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{datetime.date(2018, 4, 4): 308.54,\n",
       " datetime.date(2018, 4, 3): 313.38,\n",
       " datetime.date(2018, 4, 2): 314.0}"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "index_cd='KPI200'\n",
    "historical_prices = dict()\n",
    "historical_index_naver(index_cd,'2018-4-1','2018-4-4')\n",
    "historical_prices"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f4ffdeb-a7a4-459d-a384-c870805be0de",
   "metadata": {},
   "source": [
    "## 네이버에서 해외 지수 수집하기(JSON 파일 크롤링 pg.119~)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da47fdc0-b50e-4d2e-9a6e-9949e1aa60a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#해외지수를 json 형태로 크롤링하는 단계 S&P500 url:https://finance.naver.com/world/worldDayListJson.naver?symbol=SPI@SPX&fdtc=0&page=3\n",
    "import pandas as pd\n",
    "import requests, json   # 해외지수는 json 형태로 표출됨\n",
    "headers = {\n",
    "    'User-Agent': 'Mozilla/5.0',\n",
    "    'X-Requested-With': 'XMLHttpRequest',\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0a5318ba-0897-491a-9e86-e1d4a812a9b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "symbol = 'SPI@SPX'\n",
    "page = 1\n",
    "url= 'https://finance.naver.com/world/worldDayListJson.naver?symbol='+symbol+'&fdtc=0&page='+str(page)\n",
    "r = requests.post(url, headers=headers)\n",
    "data = json.loads(r.text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "20ebe38e-713f-434f-b935-0b250ed2e69e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'symb': 'SPI@SPX',\n",
       " 'xymd': '20240129',\n",
       " 'open': 4892.95,\n",
       " 'high': 4929.31,\n",
       " 'low': 4887.4,\n",
       " 'clos': 4927.93,\n",
       " 'diff': 36.96,\n",
       " 'rate': 0.76,\n",
       " 'gvol': 2312494390}"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "24ba3156-095c-4a0b-bbe0-26a118163466",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'SPI@SPX'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0]['symb'] #종목 이름"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "41733ccb-74fe-4cbf-861b-84a154c07b0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'20240129'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0]['xymd'] #날짜 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "ae99b429-8d8a-49f3-ac45-842d9c48a965",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4927.93"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[0]['clos'] #종가"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1a9a1ab4-1e95-418c-b395-158a360cf04f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{datetime.date(2024, 1, 29): 4927.93, datetime.date(2024, 1, 26): 4890.97, datetime.date(2024, 1, 25): 4894.16, datetime.date(2024, 1, 24): 4868.55, datetime.date(2024, 1, 23): 4864.6, datetime.date(2024, 1, 22): 4850.43, datetime.date(2024, 1, 19): 4839.81, datetime.date(2024, 1, 18): 4780.94, datetime.date(2024, 1, 17): 4739.21, datetime.date(2024, 1, 16): 4765.98}\n"
     ]
    }
   ],
   "source": [
    "#한 페이지에 있는 총 열흘 치 데이터 중 날짜와 종가만 뽑아서 딕셔너리에 저장\n",
    "d = dict()\n",
    "for n in range(len(data)):\n",
    "    date=pd.to_datetime(data[n]['xymd']).date()\n",
    "    price=float(data[n]['clos'])\n",
    "    d[date] = price\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6c81f747-fbfd-44f2-967c-4af8147e745f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#지금까지 한 내용을 read_json함수로 만들기\n",
    "def read_json(d, symbol, page=1):\n",
    "    url = 'https://finance.naver.com/world/worldDayListJson.naver?symbol='+symbol+'&fdtc=0&page='+str(page)\n",
    "    r = requests.post(url, headers=headers)\n",
    "    data = json.loads(r.text)\n",
    "    \n",
    "    for n in range(len(data)):\n",
    "        date = pd.to_datetime(data[n]['xymd']).date()\n",
    "        price = float(data[n]['clos'])\n",
    "        d[date] = price\n",
    "        \n",
    "    if len(data) >= 9 and page<3:\n",
    "        page += 1\n",
    "        read_json(d, symbol, page)\n",
    "        \n",
    "    return d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "08780043-d333-4607-a086-0e830cd70ced",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/7r/6vmcd3950rvf97kgvtk_twg40000gn/T/ipykernel_32757/4126586512.py:1: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n",
      "  historical_index= pd.Series()\n"
     ]
    }
   ],
   "source": [
    "historical_index= pd.Series()\n",
    "historical_index = read_json(historical_index, symbol, page)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "de8014bd-0718-4950-b335-2f87f83265a9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2024-01-29    4927.93\n",
       "2024-01-26    4890.97\n",
       "2024-01-25    4894.16\n",
       "2024-01-24    4868.55\n",
       "2024-01-23    4864.60\n",
       "dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "historical_index.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6856611f-b3ce-41b0-9659-56dbd9d0e548",
   "metadata": {},
   "outputs": [],
   "source": [
    "indices = {\n",
    "    'SPI@SPX' : 'S&P 500', \n",
    "    'NAS@NDX' : 'Nasdaq 100', \n",
    "    'NII@NI225' : 'Nikkei 225',\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bdfba2f6-ecfd-43f3-9668-d7785291fcfb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SPI@SPX S&P 500\n",
      "NAS@NDX Nasdaq 100\n",
      "NII@NI225 Nikkei 225\n"
     ]
    }
   ],
   "source": [
    "historical_indices = dict()\n",
    "for key, value in indices.items():\n",
    "    print(key, value)\n",
    "    s = dict()\n",
    "    s= read_json(s,key,1)\n",
    "    historical_indices[value] = s \n",
    "prices_df = pd.DataFrame(historical_indices)\n",
    "prices_df.sort_index(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "8a19b426-583b-4c9f-855b-f4de1981a78d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P 500</th>\n",
       "      <th>Nasdaq 100</th>\n",
       "      <th>Nikkei 225</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-03-31</th>\n",
       "      <td>3972.89</td>\n",
       "      <td>13091.44</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-30</th>\n",
       "      <td>3958.55</td>\n",
       "      <td>12896.53</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-29</th>\n",
       "      <td>3971.09</td>\n",
       "      <td>12965.74</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-26</th>\n",
       "      <td>3974.54</td>\n",
       "      <td>12979.12</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-25</th>\n",
       "      <td>3909.52</td>\n",
       "      <td>12780.51</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-08</th>\n",
       "      <td>3824.68</td>\n",
       "      <td>13105.20</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-07</th>\n",
       "      <td>3803.79</td>\n",
       "      <td>12939.57</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06</th>\n",
       "      <td>3748.14</td>\n",
       "      <td>12623.35</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-05</th>\n",
       "      <td>3726.86</td>\n",
       "      <td>12802.38</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-04</th>\n",
       "      <td>3700.65</td>\n",
       "      <td>12694.67</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            S&P 500  Nasdaq 100  Nikkei 225\n",
       "2021-03-31  3972.89    13091.44         NaN\n",
       "2021-03-30  3958.55    12896.53         NaN\n",
       "2021-03-29  3971.09    12965.74         NaN\n",
       "2021-03-26  3974.54    12979.12         NaN\n",
       "2021-03-25  3909.52    12780.51         NaN\n",
       "...             ...         ...         ...\n",
       "2021-01-08  3824.68    13105.20         NaN\n",
       "2021-01-07  3803.79    12939.57         NaN\n",
       "2021-01-06  3748.14    12623.35         NaN\n",
       "2021-01-05  3726.86    12802.38         NaN\n",
       "2021-01-04  3700.65    12694.67         NaN\n",
       "\n",
       "[61 rows x 3 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "398cf704-e335-43a8-992a-5272dd47683b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#날짜에 공백이 들어오면 오늘 날짜를 반환하는 기능을 구현\n",
    "def date_format(d=''):\n",
    "    if d != '':\n",
    "        this_date=pd.to_datetime(d).date()\n",
    "    else:\n",
    "        this_date = pd.Timestamp.today().date() # 오늘 날짜를 지정\n",
    "    return (this_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "85205d40-070e-4ecc-9275-74169c2c7479",
   "metadata": {},
   "outputs": [],
   "source": [
    "#해외 지수를 크롤링하는 전체 함수\n",
    "def index_global(d, symbol, start_date='',end_date='',page=1):\n",
    "    end_date = date_format(end_date)\n",
    "    if start_date == '':\n",
    "        start_date = end_date - pd.DateOffset(months=1)\n",
    "    start_date = date_format(start_date)\n",
    "    \n",
    "    url='https://finance.naver.com/world/worldDayListJson.naver?symbol='+symbol+'&fdtc=0&page='+str(page)\n",
    "    raw = requests.post(url,headers=headers)\n",
    "    data = json.loads(raw.text)\n",
    "    \n",
    "    if len(data) > 0:\n",
    "        for n in range(len(data)):\n",
    "            date = pd.to_datetime(data[n]['xymd']).date()\n",
    "            \n",
    "            if date <= end_date and date >= start_date:\n",
    "            #start_date 와 end_date 사이에서 데이터 저장\n",
    "                #종가 처리\n",
    "                price = float(data[n]['clos'])\n",
    "                #딕셔너리에 저장\n",
    "                d[date] = price\n",
    "            elif date < start_date:\n",
    "            #start_date 이전이면 함수 종료\n",
    "                return(d)\n",
    "                        \n",
    "        if len(data) >= 9:\n",
    "            page +=1\n",
    "            index_global(d, symbol, start_date,end_date,page)\n",
    "    return(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0abef9da-27f6-467a-8956-1475901d9442",
   "metadata": {},
   "outputs": [],
   "source": [
    "historical_indices = dict()\n",
    "start_date = '2021-01-01'\n",
    "end_date = '2021-3-31'\n",
    "for key, value in indices.items(): \n",
    "    s = dict()\n",
    "    s = index_global(s, key, start_date, end_date)\n",
    "    historical_indices[value] = s    \n",
    "prices_df = pd.DataFrame(historical_indices)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9d6d18ca-c265-4cb4-b10b-b63296183830",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P 500</th>\n",
       "      <th>Nasdaq 100</th>\n",
       "      <th>Nikkei 225</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2021-03-31</th>\n",
       "      <td>3972.89</td>\n",
       "      <td>13091.44</td>\n",
       "      <td>29178.80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-30</th>\n",
       "      <td>3958.55</td>\n",
       "      <td>12896.53</td>\n",
       "      <td>29432.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-29</th>\n",
       "      <td>3971.09</td>\n",
       "      <td>12965.74</td>\n",
       "      <td>29384.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-26</th>\n",
       "      <td>3974.54</td>\n",
       "      <td>12979.12</td>\n",
       "      <td>29176.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-03-25</th>\n",
       "      <td>3909.52</td>\n",
       "      <td>12780.51</td>\n",
       "      <td>28729.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-06</th>\n",
       "      <td>3748.14</td>\n",
       "      <td>12623.35</td>\n",
       "      <td>27055.94</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-05</th>\n",
       "      <td>3726.86</td>\n",
       "      <td>12802.38</td>\n",
       "      <td>27158.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-04</th>\n",
       "      <td>3700.65</td>\n",
       "      <td>12694.67</td>\n",
       "      <td>27258.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-02-15</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>30084.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-01-18</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28242.21</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>63 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            S&P 500  Nasdaq 100  Nikkei 225\n",
       "2021-03-31  3972.89    13091.44    29178.80\n",
       "2021-03-30  3958.55    12896.53    29432.70\n",
       "2021-03-29  3971.09    12965.74    29384.52\n",
       "2021-03-26  3974.54    12979.12    29176.70\n",
       "2021-03-25  3909.52    12780.51    28729.88\n",
       "...             ...         ...         ...\n",
       "2021-01-06  3748.14    12623.35    27055.94\n",
       "2021-01-05  3726.86    12802.38    27158.63\n",
       "2021-01-04  3700.65    12694.67    27258.38\n",
       "2021-02-15      NaN         NaN    30084.15\n",
       "2021-01-18      NaN         NaN    28242.21\n",
       "\n",
       "[63 rows x 3 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "cfe3cd92-ce6c-4dde-83d3-0f8a7895d0cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "index_cd = 'KPI200'\n",
    "historical_prices = dict()\n",
    "kospi200 = historical_index_naver(index_cd, '2017-1-1','2017-12-31')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "b5ad51e6-f771-43eb-9fcf-e2b41860fb29",
   "metadata": {},
   "outputs": [],
   "source": [
    "index_cd = 'SPI@SPX'\n",
    "historical_prices = dict()\n",
    "sp500= index_global(historical_prices, index_cd, '2017-1-1','2017-12-31')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13d9c86f-52be-476e-ba56-e43f6c8a32d1",
   "metadata": {},
   "source": [
    "두 지수의 데이터를 구하긴 했지만 sp500, kospi200이라는 서로 다른 통(dict)에 담겨 있기 때문에 두 딕셔너리를 합쳐야 한다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "95e3c8c9-f868-4a0c-9081-1a6c94793f87",
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'S&P500': {datetime.date(2017, 12, 29): 2673.61,\n",
       "  datetime.date(2017, 12, 28): 2687.54,\n",
       "  datetime.date(2017, 12, 27): 2682.62,\n",
       "  datetime.date(2017, 12, 26): 2680.5,\n",
       "  datetime.date(2017, 12, 22): 2683.34,\n",
       "  datetime.date(2017, 12, 21): 2684.57,\n",
       "  datetime.date(2017, 12, 20): 2679.25,\n",
       "  datetime.date(2017, 12, 19): 2681.47,\n",
       "  datetime.date(2017, 12, 18): 2690.16,\n",
       "  datetime.date(2017, 12, 15): 2675.81,\n",
       "  datetime.date(2017, 12, 14): 2652.01,\n",
       "  datetime.date(2017, 12, 13): 2662.85,\n",
       "  datetime.date(2017, 12, 12): 2664.11,\n",
       "  datetime.date(2017, 12, 11): 2659.99,\n",
       "  datetime.date(2017, 12, 8): 2651.5,\n",
       "  datetime.date(2017, 12, 7): 2636.98,\n",
       "  datetime.date(2017, 12, 6): 2629.27,\n",
       "  datetime.date(2017, 12, 5): 2629.57,\n",
       "  datetime.date(2017, 12, 4): 2639.44,\n",
       "  datetime.date(2017, 12, 1): 2642.22,\n",
       "  datetime.date(2017, 11, 30): 2647.58,\n",
       "  datetime.date(2017, 11, 29): 2626.07,\n",
       "  datetime.date(2017, 11, 28): 2627.04,\n",
       "  datetime.date(2017, 11, 27): 2601.42,\n",
       "  datetime.date(2017, 11, 24): 2602.42,\n",
       "  datetime.date(2017, 11, 22): 2597.08,\n",
       "  datetime.date(2017, 11, 21): 2599.03,\n",
       "  datetime.date(2017, 11, 20): 2582.14,\n",
       "  datetime.date(2017, 11, 17): 2578.85,\n",
       "  datetime.date(2017, 11, 16): 2585.64,\n",
       "  datetime.date(2017, 11, 15): 2564.62,\n",
       "  datetime.date(2017, 11, 14): 2578.87,\n",
       "  datetime.date(2017, 11, 13): 2584.84,\n",
       "  datetime.date(2017, 11, 10): 2582.3,\n",
       "  datetime.date(2017, 11, 9): 2584.62,\n",
       "  datetime.date(2017, 11, 8): 2594.38,\n",
       "  datetime.date(2017, 11, 7): 2590.64,\n",
       "  datetime.date(2017, 11, 6): 2591.13,\n",
       "  datetime.date(2017, 11, 3): 2587.84,\n",
       "  datetime.date(2017, 11, 2): 2579.85,\n",
       "  datetime.date(2017, 11, 1): 2579.36,\n",
       "  datetime.date(2017, 10, 31): 2575.26,\n",
       "  datetime.date(2017, 10, 30): 2572.83,\n",
       "  datetime.date(2017, 10, 27): 2581.07,\n",
       "  datetime.date(2017, 10, 26): 2560.4,\n",
       "  datetime.date(2017, 10, 25): 2557.15,\n",
       "  datetime.date(2017, 10, 24): 2569.13,\n",
       "  datetime.date(2017, 10, 23): 2564.98,\n",
       "  datetime.date(2017, 10, 20): 2575.21,\n",
       "  datetime.date(2017, 10, 19): 2562.1,\n",
       "  datetime.date(2017, 10, 18): 2561.26,\n",
       "  datetime.date(2017, 10, 17): 2559.36,\n",
       "  datetime.date(2017, 10, 16): 2557.64,\n",
       "  datetime.date(2017, 10, 13): 2553.17,\n",
       "  datetime.date(2017, 10, 12): 2550.93,\n",
       "  datetime.date(2017, 10, 11): 2555.24,\n",
       "  datetime.date(2017, 10, 10): 2550.64,\n",
       "  datetime.date(2017, 10, 9): 2544.73,\n",
       "  datetime.date(2017, 10, 6): 2549.33,\n",
       "  datetime.date(2017, 10, 5): 2552.07,\n",
       "  datetime.date(2017, 10, 4): 2537.74,\n",
       "  datetime.date(2017, 10, 3): 2534.58,\n",
       "  datetime.date(2017, 10, 2): 2529.12,\n",
       "  datetime.date(2017, 9, 29): 2519.36,\n",
       "  datetime.date(2017, 9, 28): 2510.06,\n",
       "  datetime.date(2017, 9, 27): 2507.04,\n",
       "  datetime.date(2017, 9, 26): 2496.84,\n",
       "  datetime.date(2017, 9, 25): 2496.66,\n",
       "  datetime.date(2017, 9, 22): 2502.22,\n",
       "  datetime.date(2017, 9, 21): 2500.6,\n",
       "  datetime.date(2017, 9, 20): 2508.24,\n",
       "  datetime.date(2017, 9, 19): 2506.65,\n",
       "  datetime.date(2017, 9, 18): 2503.87,\n",
       "  datetime.date(2017, 9, 15): 2500.23,\n",
       "  datetime.date(2017, 9, 14): 2495.62,\n",
       "  datetime.date(2017, 9, 13): 2498.37,\n",
       "  datetime.date(2017, 9, 12): 2496.48,\n",
       "  datetime.date(2017, 9, 11): 2488.11,\n",
       "  datetime.date(2017, 9, 8): 2461.43,\n",
       "  datetime.date(2017, 9, 7): 2465.1,\n",
       "  datetime.date(2017, 9, 6): 2465.54,\n",
       "  datetime.date(2017, 9, 5): 2457.85,\n",
       "  datetime.date(2017, 9, 1): 2476.55,\n",
       "  datetime.date(2017, 8, 31): 2471.65,\n",
       "  datetime.date(2017, 8, 30): 2457.59,\n",
       "  datetime.date(2017, 8, 29): 2446.3,\n",
       "  datetime.date(2017, 8, 28): 2444.24,\n",
       "  datetime.date(2017, 8, 25): 2443.05,\n",
       "  datetime.date(2017, 8, 24): 2438.97,\n",
       "  datetime.date(2017, 8, 23): 2444.04,\n",
       "  datetime.date(2017, 8, 22): 2452.51,\n",
       "  datetime.date(2017, 8, 21): 2428.37,\n",
       "  datetime.date(2017, 8, 18): 2425.55,\n",
       "  datetime.date(2017, 8, 17): 2430.01,\n",
       "  datetime.date(2017, 8, 16): 2468.11,\n",
       "  datetime.date(2017, 8, 15): 2464.61,\n",
       "  datetime.date(2017, 8, 14): 2465.84,\n",
       "  datetime.date(2017, 8, 11): 2441.32,\n",
       "  datetime.date(2017, 8, 10): 2438.21,\n",
       "  datetime.date(2017, 8, 9): 2474.02,\n",
       "  datetime.date(2017, 8, 8): 2474.92,\n",
       "  datetime.date(2017, 8, 7): 2480.91,\n",
       "  datetime.date(2017, 8, 4): 2476.83,\n",
       "  datetime.date(2017, 8, 3): 2472.16,\n",
       "  datetime.date(2017, 8, 2): 2477.57,\n",
       "  datetime.date(2017, 8, 1): 2476.35,\n",
       "  datetime.date(2017, 7, 31): 2470.3,\n",
       "  datetime.date(2017, 7, 28): 2472.1,\n",
       "  datetime.date(2017, 7, 27): 2475.42,\n",
       "  datetime.date(2017, 7, 26): 2477.83,\n",
       "  datetime.date(2017, 7, 25): 2477.13,\n",
       "  datetime.date(2017, 7, 24): 2469.91,\n",
       "  datetime.date(2017, 7, 21): 2472.54,\n",
       "  datetime.date(2017, 7, 20): 2473.45,\n",
       "  datetime.date(2017, 7, 19): 2473.83,\n",
       "  datetime.date(2017, 7, 18): 2460.61,\n",
       "  datetime.date(2017, 7, 17): 2459.14,\n",
       "  datetime.date(2017, 7, 14): 2459.27,\n",
       "  datetime.date(2017, 7, 13): 2447.83,\n",
       "  datetime.date(2017, 7, 12): 2443.25,\n",
       "  datetime.date(2017, 7, 11): 2425.53,\n",
       "  datetime.date(2017, 7, 10): 2427.43,\n",
       "  datetime.date(2017, 7, 7): 2425.18,\n",
       "  datetime.date(2017, 7, 6): 2409.75,\n",
       "  datetime.date(2017, 7, 5): 2432.54,\n",
       "  datetime.date(2017, 7, 3): 2429.01,\n",
       "  datetime.date(2017, 6, 30): 2423.41,\n",
       "  datetime.date(2017, 6, 29): 2419.7,\n",
       "  datetime.date(2017, 6, 28): 2440.69,\n",
       "  datetime.date(2017, 6, 27): 2419.38,\n",
       "  datetime.date(2017, 6, 26): 2439.07,\n",
       "  datetime.date(2017, 6, 23): 2438.3,\n",
       "  datetime.date(2017, 6, 22): 2434.5,\n",
       "  datetime.date(2017, 6, 21): 2435.61,\n",
       "  datetime.date(2017, 6, 20): 2437.03,\n",
       "  datetime.date(2017, 6, 19): 2453.46,\n",
       "  datetime.date(2017, 6, 16): 2433.15,\n",
       "  datetime.date(2017, 6, 15): 2432.46,\n",
       "  datetime.date(2017, 6, 14): 2437.92,\n",
       "  datetime.date(2017, 6, 13): 2440.35,\n",
       "  datetime.date(2017, 6, 12): 2429.39,\n",
       "  datetime.date(2017, 6, 9): 2431.77,\n",
       "  datetime.date(2017, 6, 8): 2433.79,\n",
       "  datetime.date(2017, 6, 7): 2433.14,\n",
       "  datetime.date(2017, 6, 6): 2429.33,\n",
       "  datetime.date(2017, 6, 5): 2436.1,\n",
       "  datetime.date(2017, 6, 2): 2439.07,\n",
       "  datetime.date(2017, 6, 1): 2430.06,\n",
       "  datetime.date(2017, 5, 31): 2411.8,\n",
       "  datetime.date(2017, 5, 30): 2412.91,\n",
       "  datetime.date(2017, 5, 26): 2415.82,\n",
       "  datetime.date(2017, 5, 25): 2415.07,\n",
       "  datetime.date(2017, 5, 24): 2404.39,\n",
       "  datetime.date(2017, 5, 23): 2398.42,\n",
       "  datetime.date(2017, 5, 22): 2394.02,\n",
       "  datetime.date(2017, 5, 19): 2381.73,\n",
       "  datetime.date(2017, 5, 18): 2365.72,\n",
       "  datetime.date(2017, 5, 17): 2357.03,\n",
       "  datetime.date(2017, 5, 16): 2400.67,\n",
       "  datetime.date(2017, 5, 15): 2402.32,\n",
       "  datetime.date(2017, 5, 12): 2390.9,\n",
       "  datetime.date(2017, 5, 11): 2394.44,\n",
       "  datetime.date(2017, 5, 10): 2399.63,\n",
       "  datetime.date(2017, 5, 9): 2396.92,\n",
       "  datetime.date(2017, 5, 8): 2399.38,\n",
       "  datetime.date(2017, 5, 5): 2399.29,\n",
       "  datetime.date(2017, 5, 4): 2389.52,\n",
       "  datetime.date(2017, 5, 3): 2388.13,\n",
       "  datetime.date(2017, 5, 2): 2391.17,\n",
       "  datetime.date(2017, 5, 1): 2388.33,\n",
       "  datetime.date(2017, 4, 28): 2384.2,\n",
       "  datetime.date(2017, 4, 27): 2388.77,\n",
       "  datetime.date(2017, 4, 26): 2387.45,\n",
       "  datetime.date(2017, 4, 25): 2388.61,\n",
       "  datetime.date(2017, 4, 24): 2374.15,\n",
       "  datetime.date(2017, 4, 21): 2348.69,\n",
       "  datetime.date(2017, 4, 20): 2355.84,\n",
       "  datetime.date(2017, 4, 19): 2338.17,\n",
       "  datetime.date(2017, 4, 18): 2342.19,\n",
       "  datetime.date(2017, 4, 17): 2349.01,\n",
       "  datetime.date(2017, 4, 13): 2328.95,\n",
       "  datetime.date(2017, 4, 12): 2344.93,\n",
       "  datetime.date(2017, 4, 11): 2353.78,\n",
       "  datetime.date(2017, 4, 10): 2357.16,\n",
       "  datetime.date(2017, 4, 7): 2355.54,\n",
       "  datetime.date(2017, 4, 6): 2357.49,\n",
       "  datetime.date(2017, 4, 5): 2352.95,\n",
       "  datetime.date(2017, 4, 4): 2360.16,\n",
       "  datetime.date(2017, 4, 3): 2358.84,\n",
       "  datetime.date(2017, 3, 31): 2362.72,\n",
       "  datetime.date(2017, 3, 30): 2368.06,\n",
       "  datetime.date(2017, 3, 29): 2361.13,\n",
       "  datetime.date(2017, 3, 28): 2358.57,\n",
       "  datetime.date(2017, 3, 27): 2341.59,\n",
       "  datetime.date(2017, 3, 24): 2343.98,\n",
       "  datetime.date(2017, 3, 23): 2345.96,\n",
       "  datetime.date(2017, 3, 22): 2348.45,\n",
       "  datetime.date(2017, 3, 21): 2344.02,\n",
       "  datetime.date(2017, 3, 20): 2373.47,\n",
       "  datetime.date(2017, 3, 17): 2378.25,\n",
       "  datetime.date(2017, 3, 16): 2381.38,\n",
       "  datetime.date(2017, 3, 15): 2385.26,\n",
       "  datetime.date(2017, 3, 14): 2365.45,\n",
       "  datetime.date(2017, 3, 13): 2373.47,\n",
       "  datetime.date(2017, 3, 10): 2372.6,\n",
       "  datetime.date(2017, 3, 9): 2364.87,\n",
       "  datetime.date(2017, 3, 8): 2362.98,\n",
       "  datetime.date(2017, 3, 7): 2368.39,\n",
       "  datetime.date(2017, 3, 6): 2375.31,\n",
       "  datetime.date(2017, 3, 3): 2383.12,\n",
       "  datetime.date(2017, 3, 2): 2381.92,\n",
       "  datetime.date(2017, 3, 1): 2395.96,\n",
       "  datetime.date(2017, 2, 28): 2363.64,\n",
       "  datetime.date(2017, 2, 27): 2369.75,\n",
       "  datetime.date(2017, 2, 24): 2367.34,\n",
       "  datetime.date(2017, 2, 23): 2363.81,\n",
       "  datetime.date(2017, 2, 22): 2362.82,\n",
       "  datetime.date(2017, 2, 21): 2365.38,\n",
       "  datetime.date(2017, 2, 17): 2351.16,\n",
       "  datetime.date(2017, 2, 16): 2347.22,\n",
       "  datetime.date(2017, 2, 15): 2349.25,\n",
       "  datetime.date(2017, 2, 14): 2337.58,\n",
       "  datetime.date(2017, 2, 13): 2328.25,\n",
       "  datetime.date(2017, 2, 10): 2316.1,\n",
       "  datetime.date(2017, 2, 9): 2307.87,\n",
       "  datetime.date(2017, 2, 8): 2294.67,\n",
       "  datetime.date(2017, 2, 7): 2293.08,\n",
       "  datetime.date(2017, 2, 6): 2292.56,\n",
       "  datetime.date(2017, 2, 3): 2297.42,\n",
       "  datetime.date(2017, 2, 2): 2280.85,\n",
       "  datetime.date(2017, 2, 1): 2279.55,\n",
       "  datetime.date(2017, 1, 31): 2278.87,\n",
       "  datetime.date(2017, 1, 30): 2280.9,\n",
       "  datetime.date(2017, 1, 27): 2294.69,\n",
       "  datetime.date(2017, 1, 26): 2296.68,\n",
       "  datetime.date(2017, 1, 25): 2298.37,\n",
       "  datetime.date(2017, 1, 24): 2280.07,\n",
       "  datetime.date(2017, 1, 23): 2265.2,\n",
       "  datetime.date(2017, 1, 20): 2271.31,\n",
       "  datetime.date(2017, 1, 19): 2263.69,\n",
       "  datetime.date(2017, 1, 18): 2271.89,\n",
       "  datetime.date(2017, 1, 17): 2267.89,\n",
       "  datetime.date(2017, 1, 13): 2274.64,\n",
       "  datetime.date(2017, 1, 12): 2270.44,\n",
       "  datetime.date(2017, 1, 11): 2275.32,\n",
       "  datetime.date(2017, 1, 10): 2268.9,\n",
       "  datetime.date(2017, 1, 9): 2268.9,\n",
       "  datetime.date(2017, 1, 6): 2276.98,\n",
       "  datetime.date(2017, 1, 5): 2269.0,\n",
       "  datetime.date(2017, 1, 4): 2270.75,\n",
       "  datetime.date(2017, 1, 3): 2257.83},\n",
       " 'KOSPI200': {datetime.date(2017, 12, 28): 324.74,\n",
       "  datetime.date(2017, 12, 27): 320.25,\n",
       "  datetime.date(2017, 12, 26): 318.89,\n",
       "  datetime.date(2017, 12, 22): 321.21,\n",
       "  datetime.date(2017, 12, 21): 319.72,\n",
       "  datetime.date(2017, 12, 20): 325.79,\n",
       "  datetime.date(2017, 12, 19): 326.76,\n",
       "  datetime.date(2017, 12, 18): 326.6,\n",
       "  datetime.date(2017, 12, 15): 326.23,\n",
       "  datetime.date(2017, 12, 14): 324.74,\n",
       "  datetime.date(2017, 12, 13): 326.18,\n",
       "  datetime.date(2017, 12, 12): 324.07,\n",
       "  datetime.date(2017, 12, 11): 325.09,\n",
       "  datetime.date(2017, 12, 8): 324.68,\n",
       "  datetime.date(2017, 12, 7): 323.59,\n",
       "  datetime.date(2017, 12, 6): 324.52,\n",
       "  datetime.date(2017, 12, 5): 329.61,\n",
       "  datetime.date(2017, 12, 4): 328.77,\n",
       "  datetime.date(2017, 12, 1): 324.78,\n",
       "  datetime.date(2017, 11, 30): 325.25,\n",
       "  datetime.date(2017, 11, 29): 330.68,\n",
       "  datetime.date(2017, 11, 28): 330.99,\n",
       "  datetime.date(2017, 11, 27): 329.53,\n",
       "  datetime.date(2017, 11, 24): 335.44,\n",
       "  datetime.date(2017, 11, 23): 334.51,\n",
       "  datetime.date(2017, 11, 22): 335.49,\n",
       "  datetime.date(2017, 11, 21): 333.51,\n",
       "  datetime.date(2017, 11, 20): 332.92,\n",
       "  datetime.date(2017, 11, 17): 334.18,\n",
       "  datetime.date(2017, 11, 16): 334.36,\n",
       "  datetime.date(2017, 11, 15): 332.17,\n",
       "  datetime.date(2017, 11, 14): 333.62,\n",
       "  datetime.date(2017, 11, 13): 334.33,\n",
       "  datetime.date(2017, 11, 10): 335.96,\n",
       "  datetime.date(2017, 11, 9): 337.14,\n",
       "  datetime.date(2017, 11, 8): 337.8,\n",
       "  datetime.date(2017, 11, 7): 336.76,\n",
       "  datetime.date(2017, 11, 6): 337.4,\n",
       "  datetime.date(2017, 11, 3): 338.83,\n",
       "  datetime.date(2017, 11, 2): 337.53,\n",
       "  datetime.date(2017, 11, 1): 338.76,\n",
       "  datetime.date(2017, 10, 31): 333.57,\n",
       "  datetime.date(2017, 10, 30): 330.38,\n",
       "  datetime.date(2017, 10, 27): 329.23,\n",
       "  datetime.date(2017, 10, 26): 326.99,\n",
       "  datetime.date(2017, 10, 25): 329.31,\n",
       "  datetime.date(2017, 10, 24): 328.96,\n",
       "  datetime.date(2017, 10, 23): 329.45,\n",
       "  datetime.date(2017, 10, 20): 328.89,\n",
       "  datetime.date(2017, 10, 19): 326.47,\n",
       "  datetime.date(2017, 10, 18): 328.4,\n",
       "  datetime.date(2017, 10, 17): 328.51,\n",
       "  datetime.date(2017, 10, 16): 327.82,\n",
       "  datetime.date(2017, 10, 13): 327.35,\n",
       "  datetime.date(2017, 10, 12): 328.11,\n",
       "  datetime.date(2017, 10, 11): 326.12,\n",
       "  datetime.date(2017, 10, 10): 322.49,\n",
       "  datetime.date(2017, 9, 29): 316.27,\n",
       "  datetime.date(2017, 9, 28): 313.85,\n",
       "  datetime.date(2017, 9, 27): 313.82,\n",
       "  datetime.date(2017, 9, 26): 314.29,\n",
       "  datetime.date(2017, 9, 25): 316.4,\n",
       "  datetime.date(2017, 9, 22): 316.71,\n",
       "  datetime.date(2017, 9, 21): 318.25,\n",
       "  datetime.date(2017, 9, 20): 318.48,\n",
       "  datetime.date(2017, 9, 19): 318.51,\n",
       "  datetime.date(2017, 9, 18): 318.93,\n",
       "  datetime.date(2017, 9, 15): 313.69,\n",
       "  datetime.date(2017, 9, 14): 312.52,\n",
       "  datetime.date(2017, 9, 13): 310.0,\n",
       "  datetime.date(2017, 9, 12): 310.42,\n",
       "  datetime.date(2017, 9, 11): 309.83,\n",
       "  datetime.date(2017, 9, 8): 307.43,\n",
       "  datetime.date(2017, 9, 7): 306.97,\n",
       "  datetime.date(2017, 9, 6): 303.18,\n",
       "  datetime.date(2017, 9, 5): 304.06,\n",
       "  datetime.date(2017, 9, 4): 304.19,\n",
       "  datetime.date(2017, 9, 1): 307.78,\n",
       "  datetime.date(2017, 8, 31): 308.28,\n",
       "  datetime.date(2017, 8, 30): 309.65,\n",
       "  datetime.date(2017, 8, 29): 308.64,\n",
       "  datetime.date(2017, 8, 28): 309.53,\n",
       "  datetime.date(2017, 8, 25): 311.21,\n",
       "  datetime.date(2017, 8, 24): 310.73,\n",
       "  datetime.date(2017, 8, 23): 309.71,\n",
       "  datetime.date(2017, 8, 22): 309.34,\n",
       "  datetime.date(2017, 8, 21): 308.14,\n",
       "  datetime.date(2017, 8, 18): 308.39,\n",
       "  datetime.date(2017, 8, 17): 309.02,\n",
       "  datetime.date(2017, 8, 16): 307.16,\n",
       "  datetime.date(2017, 8, 14): 304.93,\n",
       "  datetime.date(2017, 8, 11): 302.72,\n",
       "  datetime.date(2017, 8, 10): 308.37,\n",
       "  datetime.date(2017, 8, 9): 309.52,\n",
       "  datetime.date(2017, 8, 8): 313.4,\n",
       "  datetime.date(2017, 8, 7): 313.96,\n",
       "  datetime.date(2017, 8, 4): 313.46,\n",
       "  datetime.date(2017, 8, 3): 312.29,\n",
       "  datetime.date(2017, 8, 2): 317.69,\n",
       "  datetime.date(2017, 8, 1): 317.04,\n",
       "  datetime.date(2017, 7, 31): 314.6,\n",
       "  datetime.date(2017, 7, 28): 314.13,\n",
       "  datetime.date(2017, 7, 27): 320.51,\n",
       "  datetime.date(2017, 7, 26): 319.46,\n",
       "  datetime.date(2017, 7, 25): 320.15,\n",
       "  datetime.date(2017, 7, 24): 322.01,\n",
       "  datetime.date(2017, 7, 21): 321.79,\n",
       "  datetime.date(2017, 7, 20): 320.61,\n",
       "  datetime.date(2017, 7, 19): 318.91,\n",
       "  datetime.date(2017, 7, 18): 318.65,\n",
       "  datetime.date(2017, 7, 17): 318.52,\n",
       "  datetime.date(2017, 7, 14): 317.35,\n",
       "  datetime.date(2017, 7, 13): 316.35,\n",
       "  datetime.date(2017, 7, 12): 313.58,\n",
       "  datetime.date(2017, 7, 11): 313.59,\n",
       "  datetime.date(2017, 7, 10): 311.46,\n",
       "  datetime.date(2017, 7, 7): 310.66,\n",
       "  datetime.date(2017, 7, 6): 311.88,\n",
       "  datetime.date(2017, 7, 5): 311.77,\n",
       "  datetime.date(2017, 7, 4): 310.46,\n",
       "  datetime.date(2017, 7, 3): 312.39,\n",
       "  datetime.date(2017, 6, 30): 311.76,\n",
       "  datetime.date(2017, 6, 29): 312.56,\n",
       "  datetime.date(2017, 6, 28): 310.84,\n",
       "  datetime.date(2017, 6, 27): 312.12,\n",
       "  datetime.date(2017, 6, 26): 311.89,\n",
       "  datetime.date(2017, 6, 23): 310.26,\n",
       "  datetime.date(2017, 6, 22): 309.47,\n",
       "  datetime.date(2017, 6, 21): 307.52,\n",
       "  datetime.date(2017, 6, 20): 309.31,\n",
       "  datetime.date(2017, 6, 19): 308.61,\n",
       "  datetime.date(2017, 6, 16): 306.79,\n",
       "  datetime.date(2017, 6, 15): 306.69,\n",
       "  datetime.date(2017, 6, 14): 307.95,\n",
       "  datetime.date(2017, 6, 13): 308.02,\n",
       "  datetime.date(2017, 6, 12): 306.24,\n",
       "  datetime.date(2017, 6, 9): 309.38,\n",
       "  datetime.date(2017, 6, 8): 306.25,\n",
       "  datetime.date(2017, 6, 7): 305.68,\n",
       "  datetime.date(2017, 6, 5): 307.33,\n",
       "  datetime.date(2017, 6, 2): 307.83,\n",
       "  datetime.date(2017, 6, 1): 304.03,\n",
       "  datetime.date(2017, 5, 31): 304.67,\n",
       "  datetime.date(2017, 5, 30): 304.59,\n",
       "  datetime.date(2017, 5, 29): 306.52,\n",
       "  datetime.date(2017, 5, 26): 306.96,\n",
       "  datetime.date(2017, 5, 25): 305.22,\n",
       "  datetime.date(2017, 5, 24): 301.71,\n",
       "  datetime.date(2017, 5, 23): 301.36,\n",
       "  datetime.date(2017, 5, 22): 300.63,\n",
       "  datetime.date(2017, 5, 19): 298.08,\n",
       "  datetime.date(2017, 5, 18): 298.47,\n",
       "  datetime.date(2017, 5, 17): 299.34,\n",
       "  datetime.date(2017, 5, 16): 299.67,\n",
       "  datetime.date(2017, 5, 15): 298.87,\n",
       "  datetime.date(2017, 5, 12): 298.25,\n",
       "  datetime.date(2017, 5, 11): 299.75,\n",
       "  datetime.date(2017, 5, 10): 296.19,\n",
       "  datetime.date(2017, 5, 8): 299.86,\n",
       "  datetime.date(2017, 5, 4): 292.47,\n",
       "  datetime.date(2017, 5, 2): 289.65,\n",
       "  datetime.date(2017, 4, 28): 287.21,\n",
       "  datetime.date(2017, 4, 27): 287.34,\n",
       "  datetime.date(2017, 4, 26): 286.78,\n",
       "  datetime.date(2017, 4, 25): 285.41,\n",
       "  datetime.date(2017, 4, 24): 281.96,\n",
       "  datetime.date(2017, 4, 21): 280.05,\n",
       "  datetime.date(2017, 4, 20): 277.76,\n",
       "  datetime.date(2017, 4, 19): 276.49,\n",
       "  datetime.date(2017, 4, 18): 278.23,\n",
       "  datetime.date(2017, 4, 17): 278.1,\n",
       "  datetime.date(2017, 4, 14): 277.31,\n",
       "  datetime.date(2017, 4, 13): 279.12,\n",
       "  datetime.date(2017, 4, 12): 276.21,\n",
       "  datetime.date(2017, 4, 11): 275.49,\n",
       "  datetime.date(2017, 4, 10): 277.21,\n",
       "  datetime.date(2017, 4, 7): 279.01,\n",
       "  datetime.date(2017, 4, 6): 279.47,\n",
       "  datetime.date(2017, 4, 5): 280.74,\n",
       "  datetime.date(2017, 4, 4): 280.92,\n",
       "  datetime.date(2017, 4, 3): 281.6,\n",
       "  datetime.date(2017, 3, 31): 280.64,\n",
       "  datetime.date(2017, 3, 30): 281.66,\n",
       "  datetime.date(2017, 3, 29): 281.86,\n",
       "  datetime.date(2017, 3, 28): 281.25,\n",
       "  datetime.date(2017, 3, 27): 280.36,\n",
       "  datetime.date(2017, 3, 24): 282.31,\n",
       "  datetime.date(2017, 3, 23): 282.81,\n",
       "  datetime.date(2017, 3, 22): 282.63,\n",
       "  datetime.date(2017, 3, 21): 283.84,\n",
       "  datetime.date(2017, 3, 20): 280.75,\n",
       "  datetime.date(2017, 3, 17): 281.86,\n",
       "  datetime.date(2017, 3, 16): 280.11,\n",
       "  datetime.date(2017, 3, 15): 277.89,\n",
       "  datetime.date(2017, 3, 14): 277.89,\n",
       "  datetime.date(2017, 3, 13): 275.41,\n",
       "  datetime.date(2017, 3, 10): 272.29,\n",
       "  datetime.date(2017, 3, 9): 271.62,\n",
       "  datetime.date(2017, 3, 8): 272.29,\n",
       "  datetime.date(2017, 3, 7): 271.87,\n",
       "  datetime.date(2017, 3, 6): 270.41,\n",
       "  datetime.date(2017, 3, 3): 269.77,\n",
       "  datetime.date(2017, 3, 2): 272.65,\n",
       "  datetime.date(2017, 2, 28): 270.06,\n",
       "  datetime.date(2017, 2, 27): 268.97,\n",
       "  datetime.date(2017, 2, 24): 270.38,\n",
       "  datetime.date(2017, 2, 23): 272.89,\n",
       "  datetime.date(2017, 2, 22): 272.85,\n",
       "  datetime.date(2017, 2, 21): 272.11,\n",
       "  datetime.date(2017, 2, 20): 269.73,\n",
       "  datetime.date(2017, 2, 17): 268.84,\n",
       "  datetime.date(2017, 2, 16): 268.93,\n",
       "  datetime.date(2017, 2, 15): 268.81,\n",
       "  datetime.date(2017, 2, 14): 267.9,\n",
       "  datetime.date(2017, 2, 13): 268.81,\n",
       "  datetime.date(2017, 2, 10): 268.66,\n",
       "  datetime.date(2017, 2, 9): 267.69,\n",
       "  datetime.date(2017, 2, 8): 267.72,\n",
       "  datetime.date(2017, 2, 7): 268.97,\n",
       "  datetime.date(2017, 2, 6): 269.49,\n",
       "  datetime.date(2017, 2, 3): 268.85,\n",
       "  datetime.date(2017, 2, 2): 268.49,\n",
       "  datetime.date(2017, 2, 1): 269.56,\n",
       "  datetime.date(2017, 1, 31): 268.09,\n",
       "  datetime.date(2017, 1, 26): 270.48,\n",
       "  datetime.date(2017, 1, 25): 268.15,\n",
       "  datetime.date(2017, 1, 24): 267.3,\n",
       "  datetime.date(2017, 1, 23): 267.12,\n",
       "  datetime.date(2017, 1, 20): 266.52,\n",
       "  datetime.date(2017, 1, 19): 267.7,\n",
       "  datetime.date(2017, 1, 18): 267.08,\n",
       "  datetime.date(2017, 1, 17): 267.37,\n",
       "  datetime.date(2017, 1, 16): 266.15,\n",
       "  datetime.date(2017, 1, 13): 267.91,\n",
       "  datetime.date(2017, 1, 12): 269.95,\n",
       "  datetime.date(2017, 1, 11): 268.15,\n",
       "  datetime.date(2017, 1, 10): 263.73,\n",
       "  datetime.date(2017, 1, 9): 263.74,\n",
       "  datetime.date(2017, 1, 6): 263.2,\n",
       "  datetime.date(2017, 1, 5): 261.98,\n",
       "  datetime.date(2017, 1, 4): 263.12,\n",
       "  datetime.date(2017, 1, 3): 262.97,\n",
       "  datetime.date(2017, 1, 2): 260.36}}"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tmp = {'S&P500': sp500, 'KOSPI200' : kospi200}\n",
    "tmp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "2ba82ce8-0899-4af6-ad4f-a7fde7f6cea4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>KOSPI200</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2017-12-29</th>\n",
       "      <td>2673.61</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-28</th>\n",
       "      <td>2687.54</td>\n",
       "      <td>324.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-27</th>\n",
       "      <td>2682.62</td>\n",
       "      <td>320.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-26</th>\n",
       "      <td>2680.50</td>\n",
       "      <td>318.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-12-22</th>\n",
       "      <td>2683.34</td>\n",
       "      <td>321.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-05-29</th>\n",
       "      <td>NaN</td>\n",
       "      <td>306.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-04-14</th>\n",
       "      <td>NaN</td>\n",
       "      <td>277.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-02-20</th>\n",
       "      <td>NaN</td>\n",
       "      <td>269.73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-16</th>\n",
       "      <td>NaN</td>\n",
       "      <td>266.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2017-01-02</th>\n",
       "      <td>NaN</td>\n",
       "      <td>260.36</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>259 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             S&P500  KOSPI200\n",
       "2017-12-29  2673.61       NaN\n",
       "2017-12-28  2687.54    324.74\n",
       "2017-12-27  2682.62    320.25\n",
       "2017-12-26  2680.50    318.89\n",
       "2017-12-22  2683.34    321.21\n",
       "...             ...       ...\n",
       "2017-05-29      NaN    306.52\n",
       "2017-04-14      NaN    277.31\n",
       "2017-02-20      NaN    269.73\n",
       "2017-01-16      NaN    266.15\n",
       "2017-01-02      NaN    260.36\n",
       "\n",
       "[259 rows x 2 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "df = pd.DataFrame(tmp)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bad2789b-a073-4a1d-bc85-938a8b134547",
   "metadata": {},
   "source": [
    ">데이터가 NaN으로 보이는 이유는 2017년 1월 16일이 미국 증권시장 휴장일이 아닐까 추정된다.\n",
    "종종 다른 나라의 데이터를 비교하다 보면 나라마다 서로 공휴일이 달라서 데이터가 빠지는 경우가 많다. \n",
    "이러한 경우에는 날짜를 빼는 방법도 있는데 이 방법은 데이터의 흐름이 단절되기 때문에 데이터의 신뢰도에 악영향을 미친다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd3ff71f-3c15-409e-9526-7d6273cbf15a",
   "metadata": {},
   "source": [
    "> 금융에서는 매도 가격과 매수 가격이 맞아 떨어져서 거래가 체결되면 시세가 바뀌지만, 거래가 체결되기 전까지는 이전 체결 가격을 시세로 인정한다. 예를 들어서 위 표에서 1월 16일은 1월 15일 지수를 연장하면 된다. 하지만 만약에 1월 2일 에 2016년 12월 30일의 지수를 가져와야하는 상황에 데이터가 없을씨 계속 하루씩 더 당기는 노가다를 지속해야한다. 그러나 노가다를 계속 할 수는 없는 노릇이니 1월 3일 지수를 당겨오는 선택을 한다. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dce962ea-4978-4700-bcf4-ac52522702de",
   "metadata": {},
   "source": [
    "### 이러한 빠진 데이터를 채우는 것을 수학에서는 **보간**이라고 한다. 금융 데이터 처리를 위해 사용하는 보간을 위한 방법은 DataFrame.fillna(method='ffill') 또는 DataFrame.fillna(method = 'bfill')이다. 여기서 ffill은 'forward fill'로 앞의 데이터로 뒤의 구멍을 채우는 뜻이고 bfill은 'backward fill'로 뒤의 데이터로 앞 구멍을 채우는 의미를 가지고 있다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "1465c308-f96f-472b-9523-609291db1602",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>KOSPI200</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2008-01-02</th>\n",
       "      <td>1447.16</td>\n",
       "      <td>235.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-03</th>\n",
       "      <td>1447.16</td>\n",
       "      <td>234.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-04</th>\n",
       "      <td>1411.63</td>\n",
       "      <td>235.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-07</th>\n",
       "      <td>1416.18</td>\n",
       "      <td>231.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-08</th>\n",
       "      <td>1390.19</td>\n",
       "      <td>230.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-22</th>\n",
       "      <td>4754.63</td>\n",
       "      <td>349.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-26</th>\n",
       "      <td>4774.75</td>\n",
       "      <td>350.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-27</th>\n",
       "      <td>4781.58</td>\n",
       "      <td>352.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-28</th>\n",
       "      <td>4783.35</td>\n",
       "      <td>357.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-29</th>\n",
       "      <td>4769.83</td>\n",
       "      <td>357.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4149 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             S&P500  KOSPI200\n",
       "2008-01-02  1447.16    235.30\n",
       "2008-01-03  1447.16    234.67\n",
       "2008-01-04  1411.63    235.77\n",
       "2008-01-07  1416.18    231.00\n",
       "2008-01-08  1390.19    230.34\n",
       "...             ...       ...\n",
       "2023-12-22  4754.63    349.15\n",
       "2023-12-26  4774.75    350.43\n",
       "2023-12-27  4781.58    352.46\n",
       "2023-12-28  4783.35    357.99\n",
       "2023-12-29  4769.83    357.99\n",
       "\n",
       "[4149 rows x 2 columns]"
      ]
     },
     "execution_count": 177,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.fillna(method='ffill')\n",
    "if df.isnull().values.any():\n",
    "    df = df.fillna(method='bfill')\n",
    "df.sort_index(inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab2ea57c-456b-4565-8921-ebd2db2dfb33",
   "metadata": {},
   "source": [
    ">이러한 방식으로 1월 2일에는 1월 3일의 데이터가, 1월 16일에는 1월 13일 데이터가 채워진 것을 볼 수 있다. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c3b2fcb-f43d-4382-b948-593d0bb7d7bc",
   "metadata": {},
   "source": [
    "### 데이터 처리후 필요한 전체 데이터 받기(pg.134)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "a2cf50e5-1ca9-47fe-9596-58b769fa1937",
   "metadata": {},
   "outputs": [],
   "source": [
    "index_cd = 'KPI200'\n",
    "historical_prices = dict()\n",
    "kospi200 = historical_index_naver(index_cd, '2008-1-1','2023-12-31')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "eeb10889-e9bb-41b8-a34a-a584b154b259",
   "metadata": {},
   "outputs": [],
   "source": [
    "index_cd = 'SPI@SPX'\n",
    "historical_prices = dict()\n",
    "sp500 = index_global(historical_prices, index_cd, '2008-1-1','2023-12-31')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "3d68750c-bcbc-40c1-aa17-0047d64eb9fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "tmp = {'S&P500' : sp500, 'KOSPI200' : kospi200}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "d561db19-e1ec-4fdd-8874-3484349f9dff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>KOSPI200</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2008-01-02</th>\n",
       "      <td>1447.16</td>\n",
       "      <td>235.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-03</th>\n",
       "      <td>1447.16</td>\n",
       "      <td>234.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-04</th>\n",
       "      <td>1411.63</td>\n",
       "      <td>235.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-07</th>\n",
       "      <td>1416.18</td>\n",
       "      <td>231.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-08</th>\n",
       "      <td>1390.19</td>\n",
       "      <td>230.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-22</th>\n",
       "      <td>4754.63</td>\n",
       "      <td>349.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-26</th>\n",
       "      <td>4774.75</td>\n",
       "      <td>350.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-27</th>\n",
       "      <td>4781.58</td>\n",
       "      <td>352.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-28</th>\n",
       "      <td>4783.35</td>\n",
       "      <td>357.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-29</th>\n",
       "      <td>4769.83</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4149 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             S&P500  KOSPI200\n",
       "2008-01-02  1447.16    235.30\n",
       "2008-01-03  1447.16    234.67\n",
       "2008-01-04  1411.63    235.77\n",
       "2008-01-07  1416.18    231.00\n",
       "2008-01-08  1390.19    230.34\n",
       "...             ...       ...\n",
       "2023-12-22  4754.63    349.15\n",
       "2023-12-26  4774.75    350.43\n",
       "2023-12-27  4781.58    352.46\n",
       "2023-12-28  4783.35    357.99\n",
       "2023-12-29  4769.83       NaN\n",
       "\n",
       "[4149 rows x 2 columns]"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(tmp)\n",
    "df.sort_index(inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "b05a65ee-20c2-4453-8ab2-523a05715c3d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>KOSPI200</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2008-01-02</th>\n",
       "      <td>1447.16</td>\n",
       "      <td>235.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-03</th>\n",
       "      <td>1447.16</td>\n",
       "      <td>234.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-04</th>\n",
       "      <td>1411.63</td>\n",
       "      <td>235.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-07</th>\n",
       "      <td>1416.18</td>\n",
       "      <td>231.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-08</th>\n",
       "      <td>1390.19</td>\n",
       "      <td>230.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-22</th>\n",
       "      <td>4754.63</td>\n",
       "      <td>349.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-26</th>\n",
       "      <td>4774.75</td>\n",
       "      <td>350.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-27</th>\n",
       "      <td>4781.58</td>\n",
       "      <td>352.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-28</th>\n",
       "      <td>4783.35</td>\n",
       "      <td>357.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-12-29</th>\n",
       "      <td>4769.83</td>\n",
       "      <td>357.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4149 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             S&P500  KOSPI200\n",
       "2008-01-02  1447.16    235.30\n",
       "2008-01-03  1447.16    234.67\n",
       "2008-01-04  1411.63    235.77\n",
       "2008-01-07  1416.18    231.00\n",
       "2008-01-08  1390.19    230.34\n",
       "...             ...       ...\n",
       "2023-12-22  4754.63    349.15\n",
       "2023-12-26  4774.75    350.43\n",
       "2023-12-27  4781.58    352.46\n",
       "2023-12-28  4783.35    357.99\n",
       "2023-12-29  4769.83    357.99\n",
       "\n",
       "[4149 rows x 2 columns]"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.fillna(method='ffill')\n",
    "if df.isnull().values.any():\n",
    "    df = df.fillna(method='bfill')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "2826cbcd-636a-482f-9235-ef1756816599",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>KOSPI200</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2008-01-02</th>\n",
       "      <td>1447.16</td>\n",
       "      <td>235.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-03</th>\n",
       "      <td>1447.16</td>\n",
       "      <td>234.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-04</th>\n",
       "      <td>1411.63</td>\n",
       "      <td>235.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-07</th>\n",
       "      <td>1416.18</td>\n",
       "      <td>231.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-08</th>\n",
       "      <td>1390.19</td>\n",
       "      <td>230.34</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             S&P500  KOSPI200\n",
       "2008-01-02  1447.16    235.30\n",
       "2008-01-03  1447.16    234.67\n",
       "2008-01-04  1411.63    235.77\n",
       "2008-01-07  1416.18    231.00\n",
       "2008-01-08  1390.19    230.34"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23fd66d1-448f-408c-ba00-4ca53a925e71",
   "metadata": {},
   "source": [
    "## 맷플립을 이용해 그래프 그리기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "44350b54-33c8-4142-9f44-b8b47afa43f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "7ac17977-d55c-4f96-996e-d0abe2e799af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5)) #크기 조절\n",
    "plt.plot(df['S&P500'],label='S&P500') #데이터 선택\n",
    "plt.plot(df['KOSPI200'],label='KOSPI200')\n",
    "plt.legend(loc=0) #범례 위치 지정\n",
    "plt.grid(True, color='0.7', linestyle=':', linewidth=1) #그리드 설정"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a2fa5f5-9d3b-4581-bc07-c4fe4beae8b7",
   "metadata": {},
   "source": [
    ">이렇듯 S&P500와 KOSPI200을 그래프를 통해서 볼 수 있지만, KOSPI200의 움직임을 잘 볼 수 없기 때문에 지수화 작업을 해준다. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "23c52d64-9a69-4564-8cf8-08315536bc5f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S&P500      1447.16\n",
       "KOSPI200     235.30\n",
       "Name: 2008-01-02, dtype: float64"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[0] #인덱스(위치)로 지정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "21b8822e-0294-4094-a973-43849f0da5a1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "S&P500      1447.16\n",
       "KOSPI200     235.30\n",
       "Name: 2008-01-02, dtype: float64"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[dt.date(2008,1,2)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "eb25ba5d-25ec-41b9-bcba-9da826f17217",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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Lbe41VDbBNRNjfj4eL2roBuGdnVRWb8K2t//ew/lFRotwhyd1YvKKti9M926nXPCNnHLVCF7sF5clo4/M++HLazbd5wnft5a47EZuY75EfVue6UMq7oEB01MTGTu3LksWbKE7t2788cffxAWFsb1118PyF6o//u//+Pjjz+mqKiI7Oxsa05AgN69e7vtKZswYQK7d+92KOvVq5c1fU779u1p06YNR48eRdM0/vjjD2tU92uvvZaffvoJgJ9//plrrrkGIQRjxowhPz+f7Oxsl/upHsdKhUCBVWFoVxeV9Td17eUV7kPojOgSzZc3jWZAvz5u9x847v++xpqm8UPKQaDmkBGapvHYT47Gl95tr5RhVduQA6WlpZx77rn89NNP9OkjH9Jt27YxfPhwh+NatGhB586d2b17NzfccAMvvPACY8eOZf78+ezatcttPeLj4xk4cGCV905OTqasrIzu3buTl5dHy5YtrcN5HTt2JCtLzurIysqiUydbXiT7ffaoHscqLy9P7yrohqFdXVTW39S0L049xLiFK9l95CQAqzPc63v7qmGM6xFLabF7A+rgcf8fvSgp9/z76o8dR6zr142LA/Rv+8bheBM/Dw5vqfdlAiorIMDswH7aQJj5fLXHBwcHM27cOD766CP+85//ANI6FsI1nK2lfMiQIezZs4fly5fz+++/M3LkSFavXk3fvn0pLi5myJAhgOyxuvHGG93eNzs7m6uvvppFixYREBDgNgicpQ7V7bNH9ThWmZmZtG3rfvpxU8fQrqZ2UFt/U9N++5cywnrCjqP0aNOcCvO7/4dbxjoc16a5HJ0oOH7MobyiUiOwkYRiP3rSMeZkflEZF7yTxKuXDGFIp5YO+wpL5XfbZzeM4oxerQH9216pHqvAgNrNCgwICODbb79l3bp1PPfccwD0798f57yGJ06c4MCBA9akn5GRkVxwwQW8/fbbXHXVVSxduhSw+Vht2rSJN954g5CQEJd7njhxgtmzZ/PMM88wZswYAGJjY8nPz7caRwcPHqR9+/aA7KE6cOCA9Xz7ffaoHsdq1KhReldBNwzt6qKy/qaq3RK7qqBILqPD5ffI+B6xDsf17umYhNpUWVljpHZ/4eklaQ7b0//vb/YcPcV5b63iR/MQoYVdOYUEBghG2Dnw6932jaPHqoaeJU85deoUERERNR9oR3h4OIsX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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(df['S&P500'] / df['S&P500'].loc[dt.date(2008, 1, 2)] * 100, label='S&P500')\n",
    "plt.plot(df['KOSPI200'] / df['KOSPI200'].loc[dt.date(2008, 1, 2)] * 100, label='KOSPI200')\n",
    "plt.legend(loc=0)\n",
    "plt.grid(True, color='0.7', linestyle=':', linewidth=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0ade83b9-0224-4ae3-b783-9395fba6ad43",
   "metadata": {},
   "source": [
    "> Kospi200의 움직임이 한눈에 들어온다. 이번에는 특정 날짜 2016년 1월 1일부터의 움직임만을 추려서 보기 위해서 데이터를 지수화 시커 df_ratio_2016년 1월 1일 부터의 움직임만을 추려서 그래프를 그려본다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "819a236a-c770-4e79-9c2d-15445972479e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>KOSPI200</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-01-04</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-05</th>\n",
       "      <td>100.201226</td>\n",
       "      <td>100.639304</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-01-06</th>\n",
       "      <td>98.887045</td>\n",
       "      <td>99.987214</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                S&P500    KOSPI200\n",
       "2016-01-04  100.000000  100.000000\n",
       "2016-01-05  100.201226  100.639304\n",
       "2016-01-06   98.887045   99.987214"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_ratio_2016_now = df.loc[dt.date(2016,1,1):] / df.loc[dt.date(2016,1,4)]*100\n",
    "df_ratio_2016_now.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "309324bd-f045-4638-9376-00b78ad895d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.plot(df_ratio_2016_now['S&P500'],label='S&P500')\n",
    "plt.plot(df_ratio_2016_now['KOSPI200'],label='KOSPI200')\n",
    "plt.legend(loc=0)\n",
    "plt.grid(True, color='0.7',linestyle=':',linewidth=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55445928-0af1-4939-8c11-6208f3ad9725",
   "metadata": {},
   "source": [
    "## 회귀분석"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4d8cda64-74b3-4f6a-a95e-a4781754253b",
   "metadata": {},
   "source": [
    "#### 회귀분석을 이용해서 두 지수의 상관관계를 분석하기 위해서 두 지수를 가지고 산포도(scattered plot)을 그려본다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "973ed64a-1d57-45a2-be7f-e2ae2b8b6fb4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>S&amp;P500</th>\n",
       "      <th>KOSPI200</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2023-01-02</th>\n",
       "      <td>100.401659</td>\n",
       "      <td>100.072519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-03</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2023-01-04</th>\n",
       "      <td>100.753895</td>\n",
       "      <td>102.210097</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                S&P500    KOSPI200\n",
       "2023-01-02  100.401659  100.072519\n",
       "2023-01-03  100.000000  100.000000\n",
       "2023-01-04  100.753895  102.210097"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2023년 1월 1일부터 지수화 시켜서 상관관계를 알아본다\n",
    "df_ratio_2023_now = df.loc[dt.date(2023,1,1):]/df.loc[dt.date(2023,1, 3)]*100\n",
    "df_ratio_2023_now.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "76b736ab-b62f-4eee-bd47-0dae961bb123",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'KOSPI200')"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.scatter(df_ratio_2023_now['S&P500'], df_ratio_2023_now['KOSPI200'], marker='.')\n",
    "plt.grid(True, color='0.7',linestyle=':', linewidth=1)\n",
    "plt.xlabel('S&P500')\n",
    "plt.ylabel('KOSPI200')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f86ca52-dbe6-460d-88cb-f8533fe89fc2",
   "metadata": {},
   "source": [
    "### 회귀분석을 위해서 sklearn.linear_model 내의 LinearRegression 라이브러리를 사용한다.<br> 벡터화된 데이터 처리를 위해서 *넘파이*(Numpy)라는 모듈도 함께 사용하다. \n",
    "<hr>\n",
    "1. numpy와 LinearRegression 라이브러리를 호출한다.<br>\n",
    "2. S&P500 지수가 KOSPI200에 미피는 영향을 보기 위해서 x값인 독립변수(independent variable)에는 S&P500 지수를,<br> Y값인 종속변수에는 (dependent vvariable)에는 KOSPI200 지수를 넣는다. <br>\n",
    "3. LinearRegression 모듈은 n행 1열 벡터를 입력받기 때문에 지수 데이터를 (n,1) 모양으로 변경한다. Array.reshape(-1,1)로 백터 형태를 바꿀 수 있다. <br>\n",
    "4. LinearRegression의 fit 명령어로 회귀분석을 시행한다. <br>\n",
    "5. 회귀분석 결괏값인 기울기는 'Slope', Y절편은 'Intercept', R^2 값은 'R^2'라는 키에 저장한 딕셔너리를 반환한다. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "403976de-4865-4625-a4c7-e8bb42adf4cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'Slope': 0.5652898127301442,\n",
       " 'Intercept': 50.362962632985855,\n",
       " 'R^2': 0.6655648939199486}"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "x = df_ratio_2023_now['S&P500']\n",
    "y = df_ratio_2023_now['KOSPI200']\n",
    "\n",
    "#1개 칼럼 np.array로 변환\n",
    "independent_var = np.array(x).reshape(-1,1)\n",
    "dependent_var = np.array(y).reshape(-1,1)\n",
    "\n",
    "#Linear Regression\n",
    "regr = LinearRegression()\n",
    "regr.fit(independent_var,dependent_var)\n",
    "\n",
    "result = {'Slope':regr.coef_[0,0],'Intercept':regr.intercept_[0],'R^2':regr.score(independent_var, dependent_var)}\n",
    "result"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f665cfbc-d5d5-4c43-8510-bcf83441f95a",
   "metadata": {},
   "source": [
    "> 위의 결과를 보자면, 2023년 1월 1일의 지점으로 한 주가지수 KOSPI200와 S&P500의 상관관계 결정계수는 0.665으로 나왔다. <br>\n",
    "기울기: 0.565 y절편: 50.36 R^2: 0.665"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04b93d27-3372-4d2c-8c66-ab047f90d988",
   "metadata": {},
   "source": [
    "### 추세선을 그래프에 나타내기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "d0700751-f9b7-40ee-8b6b-0a475d5f38b4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'KOSPI200 and S&P500')"
      ]
     },
     "execution_count": 176,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(5,5))\n",
    "plt.scatter(independent_var, dependent_var, marker='.',color='skyblue')\n",
    "plt.plot(independent_var,regr.predict(independent_var),color='red',linewidth=3)\n",
    "plt.grid(True, color='0.7',linestyle=':',linewidth=1)\n",
    "plt.xlabel('S&P500')\n",
    "plt.ylabel('KOSPI200')\n",
    "font1 = {'family': 'serif',\n",
    "      'color':  'Black',\n",
    "      'weight': 'normal',\n",
    "      'size': 16}\n",
    "plt.text(115,113,'Y=0.563*X+50.36',fontdict=font1, rotation=30)\n",
    "plt.title('KOSPI200 and S&P500')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
